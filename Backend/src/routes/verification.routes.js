// ========== BACKEND: Routes de V√©rification (CORRIG√âES SANS MODIFIER LE REPO) ==========

const express = require('express');
const router = express.Router();
const permisRepository = require('../repositories/permis.repository');
const crypto = require('crypto');
const pool = require('../config/database'); // ‚úÖ Import direct de la DB

/**
 * ‚úÖ Fonction helper: Recherche EXACTE par num√©ro de permis
 */
async function findPermisByNumeroExact(numeroPermis) {
  console.log('üîç Recherche EXACTE du permis:', numeroPermis);
  
  const result = await pool.query(
    `SELECT p.*, 
            tp.nom as type_permis_nom,
            z.nom as zone_nom,
            u.nom as demandeur_nom,
            u.prenom as demandeur_prenom
     FROM permis p
     LEFT JOIN types_permis tp ON p.type_permis_id = tp.id
     LEFT JOIN zones z ON p.zone_id = z.id
     LEFT JOIN utilisateurs u ON p.demandeur_id = u.id
     WHERE p.numero_permis = $1 AND p.supprime = false
     LIMIT 1`,
    [numeroPermis]
  );
  
  console.log(`üìä R√©sultat: ${result.rows.length > 0 ? result.rows[0].numero_permis : 'Aucun'}`);
  
  return result.rows[0] || null;
}

/**
 * ‚úÖ 1. V√©rifier par Code de S√©curit√©
 * POST /api/verify/security-code
 */
router.post('/security-code', async (req, res, next) => {
  try {
    const { securityCode, numeroPermis } = req.body;

    if (!securityCode || !numeroPermis) {
      return res.status(400).json({
        success: false,
        message: 'Code de s√©curit√© et num√©ro de permis requis'
      });
    }

    console.log('üîç V√©rification par code de s√©curit√©:', { 
      securityCode, 
      numeroPermis 
    });

    // ‚úÖ CORRIG√â: Recherche EXACTE avec la fonction helper
    const permis = await findPermisByNumeroExact(numeroPermis);

    if (!permis) {
      console.log('‚ùå Permis non trouv√©:', numeroPermis);
      return res.status(404).json({
        success: false,
        message: 'Permis non trouv√©',
        isValid: false
      });
    }

    console.log('‚úÖ Permis trouv√©:', permis.numero_permis);

    // Recalculer le code de s√©curit√© pour v√©rifier
    const securityPayload = JSON.stringify({
      numero: permis.numero_permis,
      titre: permis.titre,
      zone: permis.zone_id,
      debut: permis.date_debut,
      fin: permis.date_fin,
      statut: permis.statut,
      timestamp: new Date(permis.date_creation).toISOString()
    });

    const calculatedCode = crypto
      .createHash('sha1')
      .update(securityPayload + (process.env.PDF_SERVER_SECRET || 'secure-secret'))
      .digest('hex')
      .substring(0, 12)
      .toUpperCase();

    console.log('üîê V√©rification code:');
    console.log('   Code fourni:', securityCode);
    console.log('   Code calcul√©:', calculatedCode);

    const isCodeValid = securityCode === calculatedCode;

    return res.json({
      success: true,
      isValid: isCodeValid,
      message: isCodeValid ? '‚úÖ Code valide - Permis authentique' : '‚ùå Code invalide',
      permis: {
        numero: permis.numero_permis,
        titre: permis.titre,
        zone: permis.zone_nom,
        statut: permis.statut,
        dateDebut: permis.date_debut,
        dateFin: permis.date_fin,
        demandeur: `${permis.demandeur_prenom} ${permis.demandeur_nom}`
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur v√©rification:', error.message);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la v√©rification',
      error: error.message
    });
  }
});

/**
 * ‚úÖ 2. V√©rifier par Num√©ro de Permis
 * GET /api/verify/permis/:numeroPermis
 */
router.get('/permis/:numeroPermis', async (req, res, next) => {
  try {
    const { numeroPermis } = req.params;

    console.log('üîç Recherche permis:', numeroPermis);

    // ‚úÖ CORRIG√â: Recherche EXACTE avec la fonction helper
    const permis = await findPermisByNumeroExact(numeroPermis);

    if (!permis) {
      console.log('‚ùå Permis non trouv√©:', numeroPermis);
      return res.status(404).json({
        success: false,
        message: 'Permis non trouv√©',
        isValid: false
      });
    }

    console.log('‚úÖ Permis trouv√©:', permis.numero_permis);

    const approbations = await permisRepository.getApprovals(permis.id);

    // V√©rifier l'expiration
    const dateFin = new Date(permis.date_fin);
    const aujourdhui = new Date();
    const estExpire = aujourdhui > dateFin;

    // ‚úÖ V√©rifier si au moins une approbation est APPROUVE
    const hasApproval = approbations.some(a => a.statut === 'APPROUVE');
    
    // ‚úÖ Condition de validit√© plus souple
    const isValid = !estExpire && 
                    (permis.statut === 'EN_COURS' || permis.statut === 'VALIDE' || permis.statut === 'APPROUVE') &&
                    hasApproval;

    console.log('üìã Validation:', {
      estExpire,
      statut: permis.statut,
      hasApproval,
      isValid
    });

    return res.json({
      success: true,
      isValid: isValid,
      permis: {
        numero: permis.numero_permis,
        titre: permis.titre,
        zone: permis.zone_nom,
        type: permis.type_permis_nom,
        statut: permis.statut,
        dateDebut: permis.date_debut,
        dateFin: permis.date_fin,
        estExpire: estExpire,
        demandeur: `${permis.demandeur_prenom} ${permis.demandeur_nom}`,
        description: permis.description,
        approbations: approbations.length,
        approbationsDetail: approbations.map(a => ({
          nom: `${a.prenom} ${a.nom}`,
          role: a.role_app,
          statut: a.statut,
          date: a.date_action
        }))
      },
      message: !isValid 
        ? (estExpire ? '‚ùå Permis expir√©' : !hasApproval ? '‚ùå Aucune approbation valide' : '‚ùå Statut invalide')
        : '‚úÖ Permis valide'
    });

  } catch (error) {
    console.error('‚ùå Erreur recherche:', error.message);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la recherche',
      error: error.message
    });
  }
});

/**
 * ‚úÖ 3. V√©rifier l'Int√©grit√© (depuis PDF scann√©)
 * POST /api/verify/integrity
 */
router.post('/integrity', async (req, res, next) => {
  try {
    const { numeroPermis, codeSecurite, hashDocument } = req.body;

    console.log('üîç V√©rification int√©grit√©:', { numeroPermis, codeSecurite, hashDocument });

    // ‚úÖ CORRIG√â: Recherche EXACTE avec la fonction helper
    const permis = await findPermisByNumeroExact(numeroPermis);

    if (!permis) {
      console.log('‚ùå Permis non trouv√©:', numeroPermis);
      return res.json({
        success: false,
        isValid: false,
        message: 'Permis non trouv√©',
        details: []
      });
    }

    console.log('‚úÖ Permis trouv√©:', permis.numero_permis);

    const approbations = await permisRepository.getApprovals(permis.id);
    const details = [];

    // 1Ô∏è‚É£ V√©rifier le num√©ro
    const numeroValide = permis.numero_permis === numeroPermis;
    details.push({
      check: 'Num√©ro de permis',
      valide: numeroValide,
      message: numeroValide ? '‚úÖ Num√©ro valide' : '‚ùå Num√©ro invalide'
    });

    // 2Ô∏è‚É£ V√©rifier le code de s√©curit√©
    const securityPayload = JSON.stringify({
      numero: permis.numero_permis,
      titre: permis.titre,
      zone: permis.zone_id,
      debut: permis.date_debut,
      fin: permis.date_fin,
      statut: permis.statut,
      timestamp: new Date(permis.date_creation).toISOString()
    });

    const calculatedCode = crypto
      .createHash('sha1')
      .update(securityPayload + (process.env.PDF_SERVER_SECRET || 'secure-secret'))
      .digest('hex')
      .substring(0, 12)
      .toUpperCase();

    const codeValide = codeSecurite === calculatedCode;
    details.push({
      check: 'Code de s√©curit√©',
      valide: codeValide,
      message: codeValide ? '‚úÖ Code valide' : '‚ùå Code invalide ou modifi√©'
    });

    // 3Ô∏è‚É£ V√©rifier l'expiration
    const dateFin = new Date(permis.date_fin);
    const aujourdhui = new Date();
    const paExpire = aujourdhui <= dateFin;
    details.push({
      check: 'Validit√© temporelle',
      valide: paExpire,
      message: paExpire ? '‚úÖ Permis non expir√©' : '‚ùå Permis expir√©'
    });

    // 4Ô∏è‚É£ V√©rifier le statut
    const statutValide = permis.statut === 'EN_COURS' || permis.statut === 'VALIDE';
    details.push({
      check: 'Statut du permis',
      valide: statutValide,
      message: statutValide ? `‚úÖ Statut valide (${permis.statut})` : `‚ùå Statut invalide (${permis.statut})`
    });

    // 5Ô∏è‚É£ V√©rifier les approbations
    const approbationsValides = approbations.filter(a => a.statut === 'APPROUVE').length > 0;
    details.push({
      check: 'Approbations',
      valide: approbationsValides,
      message: approbationsValides ? `‚úÖ ${approbations.length} approbation(s) valide(s)` : '‚ùå Pas d\'approbation'
    });

    // R√©sultat global
    const toutValide = details.every(d => d.valide);

    return res.json({
      success: true,
      isValid: toutValide,
      overallMessage: toutValide ? '‚úÖ DOCUMENT AUTHENTIQUE' : '‚ùå DOCUMENT SUSPECT',
      score: `${details.filter(d => d.valide).length}/${details.length}`,
      details: details,
      permis: {
        numero: permis.numero_permis,
        titre: permis.titre,
        zone: permis.zone_nom,
        statut: permis.statut
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur v√©rification int√©grit√©:', error.message);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la v√©rification',
      error: error.message
    });
  }
});

/**
 * ‚úÖ 4. Obtenir des Informations Publiques sur un Permis
 * GET /api/verify/public/:numeroPermis
 */
router.get('/public/:numeroPermis', async (req, res, next) => {
  try {
    const { numeroPermis } = req.params;

    console.log('üîç Recherche publique:', numeroPermis);

    // ‚úÖ CORRIG√â: Recherche EXACTE avec la fonction helper
    const permis = await findPermisByNumeroExact(numeroPermis);

    if (!permis) {
      console.log('‚ùå Permis non trouv√©:', numeroPermis);
      return res.status(404).json({
        success: false,
        message: 'Permis non trouv√©'
      });
    }

    console.log('‚úÖ Permis trouv√©:', permis.numero_permis);

    // Retourner seulement les infos publiques
    return res.json({
      success: true,
      permis: {
        numero: permis.numero_permis,
        titre: permis.titre,
        zone: permis.zone_nom,
        type: permis.type_permis_nom,
        statut: permis.statut,
        dateDebut: permis.date_debut,
        dateFin: permis.date_fin,
        estActif: permis.statut === 'EN_COURS',
        estExpire: new Date() > new Date(permis.date_fin)
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur recherche publique:', error.message);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la recherche'
    });
  }
});

module.exports = router;